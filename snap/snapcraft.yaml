name: pelion-edge
base: core
version: "1.20.3"
summary: Pelion Edge
description: Pelion Edge
confinement: strict
grade: devel
architectures:
  - amd64
plugs:
    snapd:
        interface: snapd-control
        refresh-schedule: managed
    system-files-logs:
        interface: system-files
        read:
          - /run/systemd/journal
          - /run/systemd/private
          - /var/lib/snapd/apparmor/profiles
        write:
          - /run/systemd/journal
          - /run/systemd/private
          - /var/lib/snapd/apparmor/profiles
          - /var/log
          - /run/log/journal
    home:
        read: all
    support:
        interface: docker-support
    privileged:
        interface: docker-support
        privileged-containers: true
    dbus-wpa:
        bus: system
        interface: dbus
        name: fi.w1.wpa_supplicant1
    docker-cli:
        interface: docker
    network:
slots:
    docker-daemon:
        interface: docker
    docker-executables:
        content: docker-executables
        interface: content
        read:
          - .
passthrough:
    layout:
        /var/lib/dockershim:
            bind: $SNAP_DATA/var/lib/dockershim
        /etc/docker:
            bind: $SNAP_DATA/etc/docker
        /var/lib/kubelet:
            bind: $SNAP_COMMON/var/lib/kubelet
        /var/log/pods:
            bind: $SNAP_COMMON/var/log/pods
        /var/log/containers:
            bind: $SNAP_COMMON/var/log/containers
# List of applications (commands, binaries, daemons) in the snap.
apps:
    relay-term:
      passthrough:
        restart-delay: 5s
      restart-condition: always
      command: bin/node $SNAP/wigwag/wigwag-core-modules/relay-term/src/index.js start $SNAP_DATA/wigwag/etc/relayterm-config.json
      daemon: simple
      environment:
        NODE_PATH: $SNAP/wigwag/devicejs-core-modules/node_modules
        LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/wigwag/system/lib
        PATH: $PATH:$SNAP/wigwag/system/bin
        DOCKER_HOST: unix://$SNAP_COMMON/var/run/docker.sock
      plugs: [network, ssh-keys, ssh-public-keys, network-bind, network-control, network-observe, snapd-control, shutdown, network-manager, modem-manager, log-observe]
    edge-core:
      passthrough:
        restart-delay: 5s
      restart-condition: always
      command: launch-edge-core.sh
      daemon: simple
      environment:
        DOCKER_HOST: unix://$SNAP_COMMON/var/run/docker.sock
      plugs:
        - docker
        - hardware-observe
        - kubernetes-support
        - log-observe
        - mount-observe
        - network-bind
        - network-control
        - network-observe
        - process-control
        - shutdown
        - snapd-control
        - system-files-logs
    help:
      command: bin/cat $SNAP/help.md
    devicedb:
      command: wigwag/system/bin/devicedb start -conf $SNAP_DATA/wigwag/etc/devicejs/devicedb.yaml
      passthrough:
        restart-delay: 5s
      restart-condition: always
      daemon: simple
      plugs: [hardware-observe, network-bind, network-control, network-observe, snapd-control]
    maestro:
      command: launch-maestro.sh
      environment:
        LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/wigwag/system/lib
      passthrough:
        restart-delay: 5s
      restart-condition: always
      daemon: simple
      plugs: [account-control, bluetooth-control, dbus-wpa, firewall-control, hardware-observe, log-observe, modem-manager, mount-observe, netlink-audit, netlink-connector, network-bind, network-control, network-manager, network-observe, x11, system-files-logs]
    maestro-shell:
      command: wigwag/system/bin/maestro-shell
      environment:
        LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/wigwag/system/lib
      plugs: [network-bind, network-control, network-observe]
    edge-proxy:
      passthrough:
        restart-delay: 5s
      restart-condition: always
      command: launch-edge-proxy.sh
      daemon: simple
      plugs: [network-bind, network-control]
    identity:
      command: launch-pelion-identity.sh $SNAP $SNAP_DATA
      daemon: simple
      plugs: [network, network-control]
    platform-version:
      command: bin/platform-version.sh
      plugs: [snapd-control]
    kubelet:
      passthrough:
        restart-delay: 5s
        after: [dockerd]
      restart-condition: always
      command: launch-kubelet.sh
      daemon: simple
      environment:
        DOCKER_HOST: unix://$SNAP_COMMON/var/run/docker.sock
      plugs:
        - bluetooth-control
        - docker
        - firewall-control
        - hardware-observe
        - kubernetes-support
        - log-observe
        - mount-observe
        - netlink-audit
        - netlink-connector
        - network-bind
        - network-control
        - network-observe
        - process-control
        - support
        - system-files-logs
        - system-observe
        - system-trace
    docker:
      command: bin/docker
      aliases:
      - docker
      environment:
        GIT_TEMPLATE_DIR: $SNAP/share/git-core/templates
        GIT_CONFIG_NOSYSTEM: "true"
        GIT_EXEC_PATH: $SNAP/libexec/git-core
        GIT_TEXTDOMAINDIR: $SNAP/usr/share/locale
        DOCKER_HOST: unix://$SNAP_COMMON/var/run/docker.sock
      completer: bin/docker-completion.sh
      plugs:
        - docker-cli
        - network
        - home
        - network-control
    dockerd:
      command: bin/dockerd-wrapper
      daemon: simple
      environment:
        DOCKER_HOST: unix://$SNAP_COMMON/var/run/docker.sock
      plugs:
        - network-bind
        - firewall-control
        - support
        - privileged
        - home
        - kernel-module-observe
      slots:
        - docker-daemon
    machine:
      command: bin/docker-machine
      environment:
        DOCKER_HOST: unix://$SNAP_COMMON/var/run/docker.sock
      plugs:
        - docker-cli
        - network
        - home
        - network-bind
    docker-help:
      command: bin/help
parts:
    help:
      plugin: dump
      source: files/help/
    platform-version:
      plugin: dump
      source: files/platform-version/
      organize:
        platform-version.sh: bin/platform-version.sh
    identity:
      plugin: dump
      source: files/identity/
    nmcli:
      plugin: nil
      stage-packages:
        - network-manager
        - libslang2
        - libatm1
      organize:
        usr/bin/nmcli: bin/nmcli
    mmcli:
      plugin: nil
      stage-packages:
        - modemmanager
      organize:
        usr/bin/mmcli: bin/mmcli
    snap:
      plugin: nil
      stage-packages:
        - snapd
      organize:
        usr/bin/snap: bin/snap
    edge-core:
      plugin: cmake
      source: https://github.com/ARMmbed/mbed-edge.git
      source-tag: 0.13.0
      build-packages:
        - build-essential
        - cmake
        - git
      build-environment:
        - COAP_PORT_OVERRIDE_443: "true"
      override-pull: |
        snapcraftctl pull
        # mbed_cloud_dev_credentials.c is required if DEVELOPER_MODE=ON
        # update_default_resources.c is required if DEVELOPER_MODE=ON && FIRMWARE_UPDATE=ON
        # Piping to true allows the cp to not fail when the file is not present
        cp ${SNAPCRAFT_PROJECT_DIR}/mbed_cloud_dev_credentials.c config/mbed_cloud_dev_credentials.c || true
        cp ${SNAPCRAFT_PROJECT_DIR}/update_default_resources.c config/update_default_resources.c || true
        cp ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/src/mbed_cloud_client_user_config.h config/mbed_cloud_client_user_config.h
        cp ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/src/sotp_fs_linux.h config/sotp_fs_linux.h
        cp ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/src/osreboot.c edge-core/osreboot.c
        cp ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/cmake/target.cmake config/target.cmake
        cp ${SNAPCRAFT_PART_SRC}/cmake/toolchains/mcc-linux-x86.cmake config/toolchain.cmake
        sed -i 's!/dev/random!/dev/urandom!' lib/mbed-cloud-client/mbed-client-pal/Source/Port/Reference-Impl/OS_Specific/Linux/Board_Specific/TARGET_x86_x64/pal_plat_x86_x64.c
        sed -i 's!\(MAX_RECONNECT_TIMEOUT\).*!\1 60!' lib/mbed-cloud-client/mbed-client/mbed-client/m2mconstants.h
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-Read-platform-version-files-into-LWM2M-resources.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-PELEDGE19-1193-Call-a-script-on-factory-reset.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-use-customized-edge-core-update-scripts.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-fix-calculation-of-remaining-buffer-size-when-callin.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-fix-bug-dynamic-resources-should-be-updatable-by-the.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0002-Fixed-edge-cloud-write-errors.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0003-Broadcast-gateway-stats-to-LWM2M-resources.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0004-allow-resources-to-be-named.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-Increasing-Path-Size.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-Call-a-restart-script-during-fota.patch
        git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-Add-support-for-network-proxy.patch
        if [ "${COAP_PORT_OVERRIDE_443}" = "true" ]; then
            echo "PATCHING PORT 443 OVERRIDE"
            [ -f config/mbed_cloud_dev_credentials.c ] && sed -i 's,\(coaps://[^:]*:\)5684,\1443,' config/mbed_cloud_dev_credentials.c
            git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-patch-mbed-edge-with-the-ability-to-override-pelion-.patch
            git am ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/patches/0001-force-port-443.patch
        fi
      configflags:
        - -DCMAKE_BUILD_TYPE=Release
        - -DTRACE_LEVEL=WARN
        - -DFIRMWARE_UPDATE=ON
        - -DDEVELOPER_MODE=ON
        - -DFACTORY_MODE=OFF
        - -DBYOC_MODE=OFF
        - -DTARGET_CONFIG_ROOT=${SNAPCRAFT_PART_SRC}/config
        - -DMBED_CLOUD_DEV_UPDATE_ID=ON
        - -DNETWORK_PROXY_SUPPORT=ON
      override-build: |
        snapcraftctl build
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/mbed
        install bin/edge-core ${SNAPCRAFT_PART_INSTALL}/wigwag/mbed/
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/config/edge-core.conf ${SNAPCRAFT_PART_INSTALL}/
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/scripts/edge-core-bootloader.sh ${SNAPCRAFT_PART_INSTALL}/
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/scripts/edge-core-factory-reset ${SNAPCRAFT_PART_INSTALL}/
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/scripts/launch-edge-core.sh ${SNAPCRAFT_PART_INSTALL}/
        # install the generic update scripts
        install ${SNAPCRAFT_PART_SRC}/lib/mbed-cloud-client/update-client-hub/modules/pal-linux/scripts/generic/*.sh ${SNAPCRAFT_PART_INSTALL}/wigwag/mbed/
        # override the generic update scripts with our own
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-core/scripts/arm_update_*.sh ${SNAPCRAFT_PART_INSTALL}/wigwag/mbed
    edge-proxy:
      plugin: go
      source: git@github.com:PelionIoT/edge-proxy.git
      source-commit: 4fe1ccad2555062f7eef05f9bffebf650a1a4a06
      go-importpath: github.com/PelionIoT/edge-proxy
      override-build: |
        snapcraftctl build
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-proxy/config/edge-proxy.conf.json ${SNAPCRAFT_PART_INSTALL}/
        install ${SNAPCRAFT_PROJECT_DIR}/files/edge-proxy/scripts/launch-edge-proxy.sh ${SNAPCRAFT_PART_INSTALL}/
      organize:
        bin/edge-proxy: wigwag/system/bin/edge-proxy
    devicedb:
      plugin: go
      source: git@github.com:armPelionEdge/devicedb.git
      source-commit: a4ee46f3d9bc58b694e7563502142dfe265110cb
      go-importpath: github.com/armPelionEdge/devicedb
      organize:
        'bin/*': wigwag/system/bin/
    edge-node-modules:
      plugin: nodejs-improved
      nodejs-package-manager: npm
      build-packages:
        - python
        - build-essential
      source: https://github.com/armPelionEdge/edge-node-modules.git
      source-commit: 64b058622402ae0f7680a61cab84c507672db0a6
      organize:
        'DevStateManager/': wigwag/wigwag-core-modules/DevStateManager/
        'LEDController/': wigwag/wigwag-core-modules/LEDController/
        'RelayStatsSender/': wigwag/wigwag-core-modules/RelayStatsSender/
        'VirtualDeviceDriver/': wigwag/wigwag-core-modules/VirtualDeviceDriver/
        'onsite-enterprise-server/': wigwag/wigwag-core-modules/onsite-enterprise-server/
        'relay-term/': wigwag/wigwag-core-modules/relay-term/
        'rsmi/': wigwag/devicejs-core-modules/rsmi/
        'zigbeeHA/': wigwag/devicejs-core-modules/zigbeeHA/
        'node_modules/': wigwag/devicejs-core-modules/node_modules/
        'maestroRunner/': wigwag/devicejs-core-modules/maestroRunner/
        'core-interfaces/': wigwag/devicejs-core-modules/core-interfaces/
    pe-utils:
      plugin: nil
      source: https://github.com/armPelionEdge/pe-utils.git
      source-commit: e18c85638f7fa555b586d60679beccc6cd4be821
      override-build: |
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/etc
        install ${SNAPCRAFT_PROJECT_DIR}/files/pe-utils/version.json ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/pe-utils
        cp -r . ${SNAPCRAFT_PART_INSTALL}/wigwag/pe-utils
        chmod -R 0755 ${SNAPCRAFT_PART_INSTALL}/wigwag/pe-utils
    maestro-shell:
      plugin: go
      source: https://github.com/armPelionEdge/maestro-shell.git
      source-commit: aa2336b361555c471daab0d2dc21a7f750bdf813
      override-pull: |
        # The go plugin also tries to run go get to fetch project dependencies. We just want to use the vendored dependencies.
        # Create the go workspace. This is normally done by the plugin
        install -d go
        install -d go/src
        install -d go/bin
        install -d go/pkg
        install -d go/src/github.com/armPelionEdge
        cd go/src/github.com/armPelionEdge
        git clone https://github.com/armPelionEdge/maestro-shell.git
        cd maestro-shell
        git checkout aa2336b361555c471daab0d2dc21a7f750bdf813
      override-build: |
        export GOPATH=${SNAPCRAFT_PART_BUILD}/go
        cd ${GOPATH}/src/github.com/armPelionEdge/maestro-shell/
        # Build maestro-shell dependencies
        ./build-deps.sh
        # Build maestro-shell
        go build github.com/armPelionEdge/maestro-shell
        # Install maestro-shell into GOPATH/bin
        go install github.com/armPelionEdge/maestro-shell
        # Install maestro-shell into the SNAPCRAFT_PART_INSTALL folder so that it is
        # copied into the prime directory during the prime step
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
        install ${GOPATH}/bin/maestro-shell ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/maestro-shell
    yq:
      plugin: go
      source: git@github.com:mikefarah/yq.git
      go-importpath: github.com/mikefarah/yq
    maestro:
      plugin: go
      source: https://github.com/armPelionEdge/maestro.git
      source-commit: a0adef8c579db2eaa15f08d1813eef417850f7d6
      build-packages:
        - python
        - build-essential
      override-pull: |
        # The go plugin also tries to run go get to fetch project dependencies. We just want to use the vendored dependencies.
        # Create the go workspace. This is normally done by the plugin
        install -d go
        install -d go/src
        install -d go/bin
        install -d go/pkg
        install -d go/src/github.com/armPelionEdge
        cd go/src/github.com/armPelionEdge
        git clone https://github.com/armPelionEdge/maestro.git
        cd maestro
        git checkout a0adef8c579db2eaa15f08d1813eef417850f7d6
      override-build: |
        export GOPATH=${SNAPCRAFT_PART_BUILD}/go
        # Specify GOBIN so that maestro/build.sh doesn't do unexpected things
        export GOBIN=${GOPATH}/bin
        cd ${GOPATH}/src/github.com/armPelionEdge/maestro/
        # Build maestro dependencies
        DEBUG= ./build-deps.sh
        # Build maestro
        DEBUG= DEBUG2= ./build.sh
        # Install maestro into GOPATH/bin
        go install github.com/armPelionEdge/maestro
        # build the grease_echo utility
        cd ${GOPATH}/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/src/greaseLib/
        make grease_echo
        make standalone_test_logsink
        # Install maestro into the SNAPCRAFT_PART_INSTALL folder so that it is
        # copied into the prime directory during the prime step
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/templates
        install ${SNAPCRAFT_PROJECT_DIR}/files/maestro/config/maestro-config-dell5000.yaml ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/templates/
        install ${SNAPCRAFT_PROJECT_DIR}/files/maestro/relayTerm.template.json ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/templates/
        install ${SNAPCRAFT_PROJECT_DIR}/files/maestro/template.devicedb.conf ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/templates/
        install ${SNAPCRAFT_PROJECT_DIR}/files/maestro/launch-maestro.sh ${SNAPCRAFT_PART_INSTALL}/
        install -d ${SNAPCRAFT_PART_INSTALL}/etc/init.d
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/lib
        install ${SNAPCRAFT_PROJECT_DIR}/files/maestro/launch-maestro.sh ${SNAPCRAFT_PART_INSTALL}/
        install ${GOPATH}/bin/maestro ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/maestro
        install ${GOPATH}/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/src/greaseLib/grease_echo ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/grease_echo
        install ${GOPATH}/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/src/greaseLib/standalone_test_logsink ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/standalone_test_logsink
        LIBS_DIR="${GOPATH}/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/lib"
        ALL_LIBS="libTW.a libprofiler.a libstacktrace.a libtcmalloc.la libtcmalloc_debug.a libtcmalloc_minimal.la libuv.a libgrease.so libprofiler.la libstacktrace.la libtcmalloc_and_profiler.a libtcmalloc_debug.la libtcmalloc_minimal_debug.a libgrease.so.1 libtcmalloc.a libtcmalloc_and_profiler.la  libtcmalloc_minimal.a libtcmalloc_minimal_debug.la libtcmalloc_minimal.so*"
        for f in $ALL_LIBS; do
          install -m 0755 $LIBS_DIR/$f ${SNAPCRAFT_PART_INSTALL}/wigwag/system/lib
        done
        # fixup the SNAP and SNAP_DATA variables in the config files based on the snap name
        sed -i "s!/snap/pelion-edge!/snap/${SNAPCRAFT_PROJECT_NAME}!" ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/templates/*.yaml
      filesets:
        bin:
          - wigwag/system/bin/*
        lib:
          - wigwag/system/lib/*
        etc:
          - wigwag/etc/*
      stage:
        - $lib
        - $bin
        - $etc
        - launch-maestro.sh
    cni:
      plugin: go
      source: https://github.com/containernetworking/plugins.git
      source-commit: ec8f6c99d030bd75337ae8bfc62fc02cdc462528
      go-importpath: github.com/containernetworking/plugins
      override-pull: |
        # The go plugin also tries to run go get to fetch project dependencies. We just want to use the vendored dependencies.
        # Create the go workspace. This is normally done by the plugin
        install -d go
        install -d go/src
        install -d go/bin
        install -d go/pkg
        install -d go/src/github.com/containernetworking
        cd go/src/github.com/containernetworking
        git clone https://github.com/containernetworking/plugins.git
        cd plugins
        git checkout ec8f6c99d030bd75337ae8bfc62fc02cdc462528
      override-build: |
        export GOFLAGS="${GOFLAGS} -mod=vendor"
        export GOPATH=${SNAPCRAFT_PART_SRC}/go
        export PROJECT_DIR=${GOPATH}/src/github.com/containernetworking/plugins

        cd ${PROJECT_DIR}
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin

        PLUGINS="plugins/meta/* plugins/main/* plugins/ipam/*"
        for d in $PLUGINS; do
          echo "$d"
          if [ -d "$d" ]; then
            plugin="$(basename "$d")"
            if [ $plugin != "windows" ]; then
              echo "  $plugin"
              go install github.com/containernetworking/plugins/$d
              install $GOPATH/bin/$plugin ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin/$plugin
            fi
          fi
        done

        cd ${SNAPCRAFT_PART_SRC}

        install -m 0755 ${SNAPCRAFT_PROJECT_DIR}/files/cni/c2d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin/c2d
        install -m 0755 ${SNAPCRAFT_PROJECT_DIR}/files/cni/c2d-inner ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin/c2d-inner

        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/etc/cni/net.d
        install -m 0644 ${SNAPCRAFT_PROJECT_DIR}/files/cni/10-c2d.conf ${SNAPCRAFT_PART_INSTALL}/wigwag/system/etc/cni/net.d/10-c2d.conf
        install -m 0644 ${SNAPCRAFT_PROJECT_DIR}/files/cni/99-loopback.conf ${SNAPCRAFT_PART_INSTALL}/wigwag/system/etc/cni/net.d/99-loopback.conf
      filesets:
        cni_bin:
          - wigwag/system/opt/cni/bin/*
        cni_conf:
          - wigwag/system/etc/cni/net.d/*
      stage:
        - $cni_bin
        - $cni_conf
    kubelet:
      plugin: go
      source: git@github.com:armPelionEdge/edge-kubelet.git
      source-commit: remove-offline-errors
      go-importpath: k8s.io/kubernetes
      override-pull: |
        # The go plugin also tries to run go get to fetch project dependencies. We just want to use the vendored depdnencies.
        # Create the go workspace. This is normally done by the plugin
        install -d go
        install -d go/src
        install -d go/bin
        install -d go/pkg
        install -d go/src/k8s.io
        cd go/src/k8s.io
        git clone git@github.com:armPelionEdge/edge-kubelet.git kubernetes
        cd kubernetes
        git checkout remove-offline-errors
      override-build: |
        export GOPATH=${SNAPCRAFT_PART_SRC}/go
        cd ${GOPATH}/src/k8s.io/kubernetes/hack/make-rules
        KUBE_VERBOSE=0 ./build.sh cmd/kubelet

        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/var/lib/kubelet
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
        install -m 0644 ${SNAPCRAFT_PROJECT_DIR}/files/kubelet/config/kubeconfig ${SNAPCRAFT_PART_INSTALL}/wigwag/system/var/lib/kubelet/kubeconfig
        install -m 0755 ../../_output/bin/kubelet ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/kubelet
        install ${SNAPCRAFT_PROJECT_DIR}/files/kubelet/scripts/launch-kubelet.sh ${SNAPCRAFT_PART_INSTALL}/
        install ${SNAPCRAFT_PROJECT_DIR}/files/kubelet/scripts/launch-edgenet.sh ${SNAPCRAFT_PART_INSTALL}/
      stage:
        - -usr/share/*
      stage-packages: [coreutils, iptables, systemd, util-linux]
    jq:
      plugin: autotools
      configflags:
        - -disable-docs
      source: https://github.com/stedolan/jq.git
      source-tag: jq-1.6
      build-packages:
        - libtool
        - flex
        - bison
    curl:
      plugin: autotools
      source: https://github.com/curl/curl.git
      source-tag: curl-7_65_3
      install-via: prefix
      build-packages:
        - libtool
    docker-wrapper-scripts:
      plugin: dump
      source: files/docker/
      stage-packages:
      - mount
      stage:
      - bin/*
      - patches/*
      - config/daemon.json
      prime:
      - -bin/prep-docker-build.sh
      - -patches/*
      - bin/*
      - config/daemon.json
    docker-docker:
      plugin: make
      source: https://github.com/docker/docker-ce.git
      source-tag: v18.06.1-ce
      source-depth: 1
      override-build: |
        # docker build specific environment variables
        export VERSION=$(cat VERSION)
        export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
        export GITCOMMIT=$DOCKER_GITCOMMIT
        export DISABLE_WARN_OUTSIDE_CONTAINER=1

        # this patches the docker sources
        . "$SNAPCRAFT_STAGE/bin/prep-docker-build.sh"

        # setup the go build environment for docker-ce
        . ${SNAPCRAFT_PROJECT_DIR}/files/docker/bin/go-build-helper.sh
        gopartbootstrap github.com/docker/docker-ce

        # build the dockerd binary
        cd components/engine
        ./hack/make.sh dynbinary
        cd $GOIMPORTPATH

        unset LDFLAGS
        ln -s "$(pwd)/components/cli" $GOPATH/src/github.com/docker/cli
        make -C $GOPATH/src/github.com/docker/cli dynbinary

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T "$GOPATH/src/github.com/docker/cli/build/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker"
        install -T "$GOPATH/src/github.com/docker/docker-ce/components/engine/bundles/latest/dynbinary-daemon/dockerd" "$SNAPCRAFT_PART_INSTALL/bin/dockerd"
        install -T "$GOPATH/src/github.com/docker/docker-ce/components/cli/contrib/completion/bash/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker-completion.sh"
      after:
      - docker-wrapper-scripts
      build-packages:
      - btrfs-tools
      - gcc
      - libc6-dev
      - libdevmapper-dev
      - libltdl-dev
      - patch
      - git
      - pkg-config
      stage-packages:
      - zfsutils-linux
      - aufs-tools
      - libltdl7
    # this part is so that things like `docker build -t foobar github.com/foo/bar` work
    docker-git:
      source: https://github.com/git/git
      source-type: git
      source-tag: v2.19.0
      source-depth: 1
      plugin: autotools
      configflags:
      - --with-curl
      - --with-expat
      build-packages:
      - gettext
      - libssl-dev
      - libexpat1-dev
      stage-packages:
      - gettext
      - libcurl3
      - libcurl4-openssl-dev
    docker-containerd:
      plugin: make
      source: https://github.com/containerd/containerd.git
      # from : https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/containerd.installer
      source-tag: v1.1.2
      override-build: |
        # setup the go build environment for containerd
        . ${SNAPCRAFT_PROJECT_DIR}/files/docker/bin/go-build-helper.sh
        gopartbootstrap github.com/containerd/containerd

        make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T bin/containerd "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd"
        install -T bin/containerd-shim "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd-shim"
        install -T bin/ctr "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd-ctr"
      after:
      - docker-wrapper-scripts
      build-packages:
      - make
    docker-runc:
      plugin: make
      source: https://github.com/opencontainers/runc.git
      # from https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/runc.installer
      source-commit: 69663f0bd4b60df09991c08812a60108003fa340
      override-build: |
        # setup the go build environment for runc
        . ${SNAPCRAFT_PROJECT_DIR}/files/docker/bin/go-build-helper.sh
        gopartbootstrap github.com/opencontainers/runc

        make BUILDTAGS='seccomp apparmor selinux' COMMIT=

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T runc "$SNAPCRAFT_PART_INSTALL/bin/docker-runc"
      after:
      - docker-wrapper-scripts
      build-packages:
      - libapparmor-dev
      - libseccomp-dev
      - make
    docker-libnetwork:
      plugin: make
      source: https://github.com/docker/libnetwork.git
      # from https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/proxy.installer
      source-commit: 3ac297bc7fd0afec9051bbb47024c9bc1d75bf5b
      override-build: |
        # setup the go build environment for libnetwork
        . ${SNAPCRAFT_PROJECT_DIR}/files/docker/bin/go-build-helper.sh
        gopartbootstrap github.com/docker/libnetwork

        make build-local

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T bin/docker-proxy "$SNAPCRAFT_PART_INSTALL/bin/docker-proxy"
        install -T bin/dnet "$SNAPCRAFT_PART_INSTALL/bin/dnet"
      after:
      - docker-wrapper-scripts
      build-packages:
      - iptables
      - make
    docker-tini:
      plugin: cmake
      source: https://github.com/krallin/tini.git
      source-type: git
      # from https://github.com/docker/docker-ce/blob/v18.05.0-ce/components/engine/hack/dockerfile/install/tini.installer
      source-commit: 949e6facb77383876aeff8a6944dde66b3089574
      organize:
        'bin/tini-static': bin/docker-init
      build-packages:
      - build-essential
      prime:
      - -bin/tini
    docker-machine:
      plugin: make
      source: https://github.com/docker/machine.git
      source-tag: v0.15.0
      source-depth: 1
      override-build: |
        # setup the go build environment for docker machine
        . ${SNAPCRAFT_PROJECT_DIR}/files/docker/bin/go-build-helper.sh
        gopartbootstrap github.com/docker/machine

        make build

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T bin/docker-machine "$SNAPCRAFT_PART_INSTALL/bin/docker-machine"
      after:
      - docker-wrapper-scripts
