name: pelion-edge
base: core
version: "1.4"
summary: Pelion Edge
description: Pelion Edge
confinement: devmode
grade: devel
architectures:
  - amd64

plugs:
    system-files:
        read: [/proc, /etc]
    home:
        read: all
    support:
        interface: docker-support
    privileged:
        interface: docker-support
        privileged-containers: true
    docker-cli:
        interface: docker
slots:
    docker-daemon:
        interface: docker
    docker-executables:
        content: docker-executables
        interface: content
        read:
          - .
passthrough:
    layout:
        /var/lib/pelion-edge:
            bind: $SNAP_DATA/var/lib/pelion-edge
        /etc/docker:
            bind: $SNAP_DATA/etc/docker
# List of applications (commands, binaries, daemons) in the snap.
apps:
    edge-core:
      passthrough:
        restart-delay: 5s
      restart-condition: always
      command: launch-edge-core.sh
      daemon: simple
      plugs: [hardware-observe, network-bind, network-control, network-observe, system-files]
    edge-core-reset-storage:
      command: launch-edge-core.sh --reset-storage
      passthrough:
        restart-delay: 5s
      restart-condition: always
      daemon: simple
      plugs: [hardware-observe, network-bind, network-control, network-observe, system-files]
    help:
      command: cat ${SNAP}/help.md
    maestro:
      command: wigwag/system/bin/maestro -config $SNAP_DATA/maestro-config.yaml
      environment:
        LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/wigwag/system/lib
      plugs: [account-control, bluetooth-control, firewall-control, hardware-observe, log-observe, netlink-audit, netlink-connector, network-bind, network-control, network-observe, system-files, x11]
    fp-edge:
      passthrough:
        restart-delay: 5s
      restart-condition: always
      command: launch-fp-edge.sh
      daemon: simple
      plugs: [network-bind]
    identity:
      command: launch-pelion-identity.sh $SNAP/wigwag $SNAP_DATA/var/lib
      daemon: simple
    kubelet:
      passthrough:
        restart-delay: 5s
        after: [dockerd]
      restart-condition: always
      command: launch-kubelet.sh
      daemon: simple
      plugs: [block-devices, bluetooth-control, docker, firewall-control, kubernetes-support, mount-observe, netlink-audit, netlink-connector, network-control, process-control, system-files, system-observe, system-trace]
    docker:
      command: docker
      aliases:
      - docker
      environment:
        GIT_TEMPLATE_DIR: $SNAP/share/git-core/templates
        GIT_CONFIG_NOSYSTEM: "true"
        GIT_EXEC_PATH: $SNAP/libexec/git-core
        GIT_TEXTDOMAINDIR: $SNAP/usr/share/locale
      completer: bin/docker-completion.sh
      plugs:
        - docker-cli
        - network
        - home
    dockerd:
      command: dockerd-wrapper
      daemon: simple
      plugs:
        - network-bind
        - firewall-control
        - support
        - privileged
        - home
      slots:
        - docker-daemon
    compose:
      command: docker-compose
      plugs:
        - docker-cli
        - network
        - home
    machine:
      command: docker-machine
      plugs:
        - docker-cli
        - network
        - home
        - network-bind
    docker-help:
      command: help
parts:
    edge-core:
      plugin: cmake
      source: https://github.com/ARMmbed/mbed-edge.git
      source-tag: 0.9.0
      build-packages:
        - build-essential
        - cmake
        - git
      override-pull: |
        snapcraftctl pull
        git submodule update --init --recursive
        cp ${SNAPCRAFT_PROJECT_DIR}/mbed_cloud_dev_credentials.c config/mbed_cloud_dev_credentials.c
        cp ${SNAPCRAFT_PROJECT_DIR}/cmake/target.cmake config/target.cmake
        cp ${SNAPCRAFT_PART_SRC}/cmake/toolchains/mcc-linux-x86.cmake config/toolchain.cmake
        sed -i 's!/dev/random!/dev/urandom!' lib/mbed-cloud-client/mbed-client-pal/Source/Port/Reference-Impl/OS_Specific/Linux/Board_Specific/TARGET_x86_x64/pal_plat_x86_x64.c
        sed -i 's!\(MBED_CLOUD_CLIENT_LIFETIME\).*!\1 600!' config/mbed_cloud_client_user_config.h
        sed -i 's!\(MAX_RECONNECT_TIMEOUT\).*!\1 60!' lib/mbed-cloud-client/mbed-client/mbed-client/m2mconstants.h
      configflags:
        - -DCMAKE_BUILD_TYPE=Release
        - -DTRACE_LEVEL=INFO
        - -DFIRMWARE_UPDATE=OFF
        - -DDEVELOPER_MODE=ON
        - -DFACTORY_MODE=OFF
        - -DBYOC_MODE=OFF
        - -DTARGET_CONFIG_ROOT=${SNAPCRAFT_PART_SRC}/config
      override-build: |
        snapcraftctl build
        install bin/edge-core ${SNAPCRAFT_PART_INSTALL}
      organize:
        'edge-core': wigwag/mbed/
    files:
      plugin: dump
      source: files-dumped/
      stage:
        - bin/*
        - '*'
      prime:
        - -bin/go-build-helper.sh
    fog-proxy:
      plugin: go
      source: git@github.com:armPelionEdge/fog-proxy.git
      source-commit: c24c70b25de44a7a791ed31a9bf16b396055aa0f
      go-importpath: github.com/armPelionEdge/fog-proxy
      override-build: |
        snapcraftctl build
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
      organize:
        bin/fp-edge: wigwag/system/bin/fp-edge
      stage:
        - wigwag/system/bin/fp-edge
    devicedb:
      plugin: go
      source: git@github.com:armPelionEdge/devicedb.git
      source-commit: b093eef83f486078a8a20e94e63726beaf71816d
      go-importpath: github.com/armPelionEdge/devicedb
      organize:
        'bin/*': wigwag/system/bin/
    wwrelay-utils:
      plugin: nodejs-improved
      nodejs-package-manager: npm
      source: https://github.com/armPelionEdge/edge-utils.git
      source-commit: 0fca1286b14647b9017aef68b966f4f3afd5ca37
      override-pull: |
        snapcraftctl pull
        cp ${SNAPCRAFT_PROJECT_DIR}/files-installed/wwrelay-utils/package.json .
      override-build: |
        snapcraftctl build
        cp ${SNAPCRAFT_PROJECT_DIR}/files-installed/wwrelay-utils/version.json ${SNAPCRAFT_PART_INSTALL}/wigwag/etc/versions.json
        ../npm/bin/npm pack ./debug_scripts/get_new_gw_identity/developer_gateway_identity/
        ../npm/bin/npm install developer_identity-*.tgz
        cp -r node_modules ${SNAPCRAFT_PART_INSTALL}/
      organize:
        node_modules: wigwag/devicejs-core-modules/node_modules
        debug_scripts: wigwag/wwrelay-utils/debug_scripts
        bin: wigwag/system/bin
      filesets:
        versions:
          - wigwag/etc/versions.json
        node_modules:
          - wigwag/devicejs-core-modules/node_modules
        production:
          - wigwag/wwrelay-utils/debug_scripts/create-new-eeprom-with-self-signed-certs.sh
          - wigwag/system/bin/
      prime:
        - $versions
        - $node_modules
        - $production
    dss:
      plugin: dump
      source: https://github.com/armPelionEdge/edgeos-shell-scripts.git
      source-commit: 04db833a43b80ecdfae07fd388bbe4e242771f38
      organize:
        '*': wigwag/system/bin/
    openssl10:
      plugin: make
      make-install-var: "INSTALL_PREFIX"
      source: https://www.openssl.org/source/openssl-1.0.2s.tar.gz
      source-checksum: md5/98ec4e085962689b91d25e1dcdfc14a2
      override-build: |
        ./config shared
        make depend
        snapcraftctl build
    maestro:
      plugin: autotools
      build-packages:
        - python
        - build-essential
      source: https://github.com/armPelionEdge/maestro.git
      source-commit: e5d0378ccca0535cdc1b4e58543a349ad0a5bfc6
      override-build: |
        rm -rf *
        TOP=`pwd`
        mkdir git
        git clone https://github.com/armPelionEdge/maestro.git m
        git clone https://github.com/armPelionEdge/rallypointwatchdogs.git wd
        S_WD="${TOP}/wd"
        S_M="${TOP}/m"
        cd $S_M
        mkdir -p vendor/github.com/armPelionEdge/greasego/deps/lib
        mkdir -p vendor/github.com/armPelionEdge/greasego/deps/include
        mkdir -p vendor/github.com/armPelionEdge/greasego/deps/bin
        cd vendor/github.com/armPelionEdge/greasego/deps/src/greaseLib/deps/
        ./install-deps.sh
        cd ..
        rm -f *.o *.a
        make libgrease.a-server
        make libgrease.so.1
        make grease_echo
        make standalone_test_logsink
        GREASEGO=$S_M/vendor/github.com/armPelionEdge/greasego
        if [ -e libgrease.so.1 ]; then
        # migrate all of the greaselib dependencies up to the folder Go will use
        cp -r deps/build/lib/* $GREASEGO/deps/lib
        cp -r deps/build/include/* $GREASEGO/deps/include
        cp $GREASEGO/deps/src/greaseLib/deps/libuv-v1.10.1/include/uv* $GREASEGO/deps/include
        # move our binary into lib - static is all we use
        cp libgrease.so.1 $GREASEGO/deps/lib
        cp *.h $GREASEGO/deps/include
        cd $GREASEGO/deps/lib
        if [ ! -e libgrease.so ]; then
          ln -s libgrease.so.1 libgrease.so
        fi
        fi
        # NOTE: MUST INSTALL libgrease.so.1 to Yocto
        cd $S_M/vendor/github.com/armPelionEdge/greasego
        DEBUG=1 ./build.sh preprocess_only
        rm -rf src
        # remove the /vendor/maestroSpecs dir, b/c we want this to use the same folder
        # as the plugins (watchdog, etc.)
        cd $S_M
        DEBUG=1 DEBUG2=1 ./build.sh preprocess_only
        # wipe out the src directories, seems to cause confusion with Go compiler in
        rm -rf src
        # Yocto build
        cd $TOP
        mkdir -p go-workspace/bin
        mkdir -p go-workspace/pkg
        mkdir -p go-workspace/src
        mkdir -p go-workspace/src/github.com/armPelionEdge
        # maestro-shell
        WORKSPACE="`pwd`/go-workspace"
        export CGO_ENABLED=1
        export GOPATH="$WORKSPACE"
        export GOBIN="$WORKSPACE/bin"
        cd go-workspace/src/github.com/armPelionEdge
        git clone https://github.com/armPelionEdge/maestro-shell.git
        cd maestro-shell
        go build
        cd $TOP
        # Resume maestro install
        mv "${S_M}" go-workspace/src/github.com/armPelionEdge/maestro
        mv go-workspace/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/maestroSpecs go-workspace/src/github.com/armPelionEdge/maestroSpecs
        mv go-workspace/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/mustache go-workspace/src/github.com/armPelionEdge/mustache
        rm -rf "${S_WD}/vendor/github.com/armPelionEdge/maestroSpecs"
        mv "${S_WD}" go-workspace/src/github.com/armPelionEdge/rallypointwatchdogs
        # do the actual build
        S_SPECS="${TOP}/specs"
        cd $TOP
        WORKSPACE="`pwd`/go-workspace"
        export CGO_ENABLED=1
        export GOPATH="$WORKSPACE"
        export GOBIN="$WORKSPACE/bin"
        cd go-workspace/src
        cd github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego
        make clean
        make bindings.a-debug
        # when not doing a debug - get rid of the DEBUG vars
        # On 'thud': for some reason the GOARCH is using the host not the target
        export GOARCH=`echo $AR | awk -F '-' '{print $1}'`
        go env
        cd "$WORKSPACE"/bin
        go build -tags debug -x github.com/armPelionEdge/maestro/maestro
        cd "$WORKSPACE"/src/github.com/armPelionEdge/rallypointwatchdogs
        # TODO -  only build what we need for the platform
        ./build.sh
        cd $TOP
        install -d ${SNAPCRAFT_PART_INSTALL}/etc/init.d
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/lib
        install ${SNAPCRAFT_PROJECT_DIR}/files-installed/maestro/maestro.sh ${SNAPCRAFT_PART_INSTALL}/etc/init.d/maestro.sh
        install go-workspace/src/github.com/armPelionEdge/rallypointwatchdogs/rp100/rp100wd.so ${SNAPCRAFT_PART_INSTALL}/wigwag/system/lib/rp100wd.so
        install go-workspace/src/github.com/armPelionEdge/rallypointwatchdogs/dummy/dummywd.so ${SNAPCRAFT_PART_INSTALL}/wigwag/system/lib/dummywd.so
        install go-workspace/bin/maestro ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/maestro
        install go-workspace/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/src/greaseLib/grease_echo ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/grease_echo
        install go-workspace/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/src/greaseLib/standalone_test_logsink ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/standalone_test_logsink
        MAESTRO_LIBS="${TOP}/go-workspace/src/github.com/armPelionEdge/maestro/vendor/github.com/armPelionEdge/greasego/deps/lib"
        ALL_LIBS="libTW.a libprofiler.a libstacktrace.a libtcmalloc.la libtcmalloc_debug.a libtcmalloc_minimal.la libuv.a libgrease.so libprofiler.la libstacktrace.la libtcmalloc_and_profiler.a libtcmalloc_debug.la libtcmalloc_minimal_debug.a libgrease.so.1 libtcmalloc.a libtcmalloc_and_profiler.la  libtcmalloc_minimal.a libtcmalloc_minimal_debug.la libtcmalloc_minimal.so*"
        for f in $ALL_LIBS; do
          install -m 0755 $MAESTRO_LIBS/$f ${SNAPCRAFT_PART_INSTALL}/wigwag/system/lib
        done
        # maestro-shell installs
        install go-workspace/src/github.com/armPelionEdge/maestro-shell/maestro-shell ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/maestro-shell
      filesets:
        etc:
          - etc/init.d/maestro.sh
        bin:
          - wigwag/system/bin/*
        lib:
          - wigwag/system/lib/*
      stage:
        - $lib
        - $bin
        - $etc
    cni:
      plugin: go
      source: https://github.com/containernetworking/plugins.git
      source-commit: ec8f6c99d030bd75337ae8bfc62fc02cdc462528
      go-importpath: github.com/containernetworking/plugins
      override-pull: |
        # The go plugin also tries to run go get to fetch project dependencies. We just want to use the vendored dependencies.
        # Create the go workspace. This is normally done by the plugin
        install -d go
        install -d go/src
        install -d go/bin
        install -d go/pkg
        install -d go/src/github.com/containernetworking
        cd go/src/github.com/containernetworking
        git clone https://github.com/containernetworking/plugins.git
        cd plugins
        git checkout ec8f6c99d030bd75337ae8bfc62fc02cdc462528
      override-build: |
        export GOFLAGS="${GOFLAGS} -mod=vendor"
        export GOPATH=${SNAPCRAFT_PART_SRC}/go
        export PROJECT_DIR=${GOPATH}/src/github.com/containernetworking/plugins

        cd ${PROJECT_DIR}
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin

        PLUGINS="plugins/meta/* plugins/main/* plugins/ipam/*"
        for d in $PLUGINS; do
          echo "$d"
          if [ -d "$d" ]; then
            plugin="$(basename "$d")"
            if [ $plugin != "windows" ]; then
              echo "  $plugin"
              go install github.com/containernetworking/plugins/$d
              install $GOPATH/bin/$plugin ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin/$plugin
            fi
          fi
        done

        cd ${SNAPCRAFT_PART_SRC}

        install -m 0755 ${SNAPCRAFT_PROJECT_DIR}/files-installed/cni/c2d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin/c2d
        install -m 0755 ${SNAPCRAFT_PROJECT_DIR}/files-installed/cni/c2d-inner ${SNAPCRAFT_PART_INSTALL}/wigwag/system/opt/cni/bin/c2d-inner

        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/etc/cni/net.d
        install -m 0644 ${SNAPCRAFT_PROJECT_DIR}/files-installed/cni/10-c2d.conf ${SNAPCRAFT_PART_INSTALL}/wigwag/system/etc/cni/net.d/10-c2d.conf
        install -m 0644 ${SNAPCRAFT_PROJECT_DIR}/files-installed/cni/99-loopback.conf ${SNAPCRAFT_PART_INSTALL}/wigwag/system/etc/cni/net.d/99-loopback.conf
      filesets:
        cni_bin:
          - wigwag/system/opt/cni/bin/*
        cni_conf:
          - wigwag/system/etc/cni/net.d/*
      stage:
        - $cni_bin
        - $cni_conf
    kubelet:
      plugin: go
      source: git@github.com:armPelionEdge/argus.git
      source-commit: 89ba7843747d9fc230cc06bc1f7d597e79ad56f8
      go-importpath: k8s.io/kubernetes
      override-pull: |
        # The go plugin also tries to run go get to fetch project dependencies. We just want to use the vendored depdnencies.
        # Create the go workspace. This is normally done by the plugin
        install -d go
        install -d go/src
        install -d go/bin
        install -d go/pkg
        install -d go/src/k8s.io
        cd go/src/k8s.io
        git clone git@github.com:armPelionEdge/argus.git kubernetes
        cd kubernetes
        git checkout 89ba7843747d9fc230cc06bc1f7d597e79ad56f8
      override-build: |
        export GOPATH=${SNAPCRAFT_PART_SRC}/go
        cd ${GOPATH}/src/k8s.io/kubernetes/hack/make-rules
        ./build.sh cmd/kubelet

        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/var/lib/kubelet
        install -d ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin
        install -m 0644 ${SNAPCRAFT_PROJECT_DIR}/files-installed/kubelet/kubeconfig ${SNAPCRAFT_PART_INSTALL}/wigwag/system/var/lib/kubelet/kubeconfig
        install -m 0755 ../../_output/bin/kubelet ${SNAPCRAFT_PART_INSTALL}/wigwag/system/bin/kubelet
      stage:
        - wigwag/system/bin/kubelet
        - wigwag/system/var/lib/kubelet/kubeconfig
      stage-packages: [coreutils, iptables, systemd]
    jq:
      plugin: autotools
      configflags:
        - -disable-docs
      source: https://github.com/stedolan/jq.git
      source-tag: jq-1.6
      build-packages:
        - libtool
        - flex
        - bison
    curl:
      plugin: autotools
      source: https://github.com/curl/curl.git
      source-tag: curl-7_65_3
      install-via: prefix
      build-packages:
        - libtool
    docker-wrapper-scripts:
      plugin: dump
      source: docker/
      stage-packages:
      - mount
      stage:
      - bin/*
      - patches/*
      - config/daemon.json
      prime:
      - -bin/prep-docker-build.sh
      - -bin/go-build-helper.sh
      - -patches/*
      - bin/*
      - config/daemon.json
    docker-docker:
      plugin: make
      source: https://github.com/docker/docker-ce.git
      source-tag: v18.06.1-ce
      source-depth: 1
      override-build: |
        # docker build specific environment variables
        export VERSION=$(cat VERSION)
        export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
        export GITCOMMIT=$DOCKER_GITCOMMIT
        export DISABLE_WARN_OUTSIDE_CONTAINER=1

        # this patches the docker sources
        . "$SNAPCRAFT_STAGE/bin/prep-docker-build.sh"

        # setup the go build environment for docker-ce
        . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
        gopartbootstrap github.com/docker/docker-ce

        # build the dockerd binary
        cd components/engine
        ./hack/make.sh dynbinary
        cd $GOIMPORTPATH

        unset LDFLAGS
        ln -s "$(pwd)/components/cli" $GOPATH/src/github.com/docker/cli
        make -C $GOPATH/src/github.com/docker/cli dynbinary

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T "$GOPATH/src/github.com/docker/cli/build/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker"
        install -T "$GOPATH/src/github.com/docker/docker-ce/components/engine/bundles/latest/dynbinary-daemon/dockerd" "$SNAPCRAFT_PART_INSTALL/bin/dockerd"
        install -T "$GOPATH/src/github.com/docker/docker-ce/components/cli/contrib/completion/bash/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker-completion.sh"
      after:
      - docker-wrapper-scripts
      build-packages:
      - btrfs-tools
      - gcc
      - libc6-dev
      - libdevmapper-dev
      - libltdl-dev
      - patch
      - git
      - pkg-config
      stage-packages:
      - zfsutils-linux
      - aufs-tools
      - libltdl7
    # this part is so that things like `docker build -t foobar github.com/foo/bar` work
    docker-git:
      source: https://github.com/git/git
      source-type: git
      source-tag: v2.19.0
      source-depth: 1
      plugin: autotools
      configflags:
      - --with-curl
      - --with-expat
      build-packages:
      - gettext
      - libssl-dev
      - libexpat1-dev
      stage-packages:
      - gettext
      - libcurl3
      - libcurl4-openssl-dev
    docker-containerd:
      plugin: make
      source: https://github.com/containerd/containerd.git
      # from : https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/containerd.installer
      source-commit: 468a545b9edcd5932818eb9de8e72413e616e86e
      override-build: |
        # setup the go build environment for containerd
        . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
        gopartbootstrap github.com/containerd/containerd

        make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T bin/containerd "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd"
        install -T bin/containerd-shim "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd-shim"
        install -T bin/ctr "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd-ctr"
      after:
      - docker-wrapper-scripts
      build-packages:
      - make
    docker-runc:
      plugin: make
      source: https://github.com/opencontainers/runc.git
      # from https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/runc.installer
      source-commit: 69663f0bd4b60df09991c08812a60108003fa340
      override-build: |
        # setup the go build environment for runc
        . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
        gopartbootstrap github.com/opencontainers/runc

        make BUILDTAGS='seccomp apparmor selinux' COMMIT=

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T runc "$SNAPCRAFT_PART_INSTALL/bin/docker-runc"
      after:
      - docker-wrapper-scripts
      build-packages:
      - libapparmor-dev
      - libseccomp-dev
      - make
    docker-libnetwork:
      plugin: make
      source: https://github.com/docker/libnetwork.git
      # from https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/proxy.installer
      source-commit: 3ac297bc7fd0afec9051bbb47024c9bc1d75bf5b
      override-build: |
        # setup the go build environment for libnetwork
        . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
        gopartbootstrap github.com/docker/libnetwork

        make build-local

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T bin/docker-proxy "$SNAPCRAFT_PART_INSTALL/bin/docker-proxy"
        install -T bin/dnet "$SNAPCRAFT_PART_INSTALL/bin/dnet"
      after:
      - docker-wrapper-scripts
      build-packages:
      - iptables
      - make
    docker-tini:
      plugin: cmake
      source: https://github.com/krallin/tini.git
      source-type: git
      # from https://github.com/docker/docker-ce/blob/v18.05.0-ce/components/engine/hack/dockerfile/install/tini.installer
      source-commit: 949e6facb77383876aeff8a6944dde66b3089574
      organize:
        'bin/tini-static': bin/docker-init
      build-packages:
      - build-essential
      prime:
      - -bin/tini
    docker-compose:
      plugin: python
      python-version: python2
      source: https://github.com/docker/compose.git
      source-tag: 1.22.0
      source-depth: 1
    docker-machine:
      plugin: make
      source: https://github.com/docker/machine.git
      source-tag: v0.15.0
      source-depth: 1
      override-build: |
        # setup the go build environment for docker machine
        . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
        gopartbootstrap github.com/docker/machine

        make build

        install -d "$SNAPCRAFT_PART_INSTALL/bin"
        install -T bin/docker-machine "$SNAPCRAFT_PART_INSTALL/bin/docker-machine"
      after:
      - docker-wrapper-scripts
