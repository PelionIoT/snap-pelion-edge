From 1c170d7950a306c3cf08a990e054c3fc2ba98562 Mon Sep 17 00:00:00 2001
From: Nic Costa <nic.costa@gmail.com>
Date: Mon, 1 Feb 2021 11:27:22 -0600
Subject: [PATCH] Add support for network proxy

A new CLI argument '-x' is added to specify a network proxy
through which mbed-edge should connect to the cloud.

An optional username and password can be specified in the
proxy configuration.  For example:
	http://user:pass@proxy-server.com:8080

WARNING: only http proxies are supported at this time.
---
 cmake/edge_configure.cmake                    |   7 +
 edge-client/edge-client/edge_client.h         |   3 +
 edge-client/edge-client/edge_client_impl.h    |   7 +
 edge-client/edge_client.cpp                   |   3 +
 edge-core/edge_core_clip.h                    |  19 +-
 edge-core/edge_server.c                       |   3 +
 .../m2mconnectionhandlerpimpl.h               |  49 ++++-
 .../source/m2mconnectionhandler.cpp           |   7 +
 .../source/m2mconnectionhandlerpimpl.cpp      | 178 +++++++++++++++++-
 .../mbed-client/m2mconnectionhandler.h        |   6 +
 .../mbed-client/m2mconnectionproxy.h          |  90 +++++++++
 .../mbed-client/mbed-client/m2minterface.h    |   6 +
 .../source/include/m2minterfaceimpl.h         |   6 +
 .../mbed-client/source/m2mconnectionproxy.cpp | 117 ++++++++++++
 .../mbed-client/source/m2minterfaceimpl.cpp   |   7 +
 .../mbed-cloud-client/MbedCloudClient.h       |   9 +
 .../source/MbedCloudClient.cpp                |  10 +
 17 files changed, 520 insertions(+), 7 deletions(-)
 create mode 100644 lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionproxy.h
 create mode 100644 lib/mbed-cloud-client/mbed-client/source/m2mconnectionproxy.cpp

diff --git a/cmake/edge_configure.cmake b/cmake/edge_configure.cmake
index 85ae44c..42cfe59 100644
--- a/cmake/edge_configure.cmake
+++ b/cmake/edge_configure.cmake
@@ -8,6 +8,9 @@
 # Enable firmware update capabilities
 option (FIRMWARE_UPDATE "Enable firware update" ON)
 
+# Support network proxies
+option (NETWORK_PROXY_SUPPORT "Enable support for network proxies" OFF)
+
 # Provisioning mode
 # Use -D[DEVELOPER|BYOC|FACTORY]_MODE=ON
 option (DEVELOPER_MODE "Developer mode" OFF)
@@ -110,6 +113,10 @@ if (${FIRMWARE_UPDATE})
 
 endif()
 
+if (${NETWORK_PROXY_SUPPORT})
+  add_definitions ("-DMBED_CLOUD_CLIENT_NETWORK_PROXY=1")
+endif()
+
 # mbedtls is supported
 # Custom mbedtls configuration header file can be given with argument -DMBEDTLS_CONFIG
 SET (TLS_LIBRARY "mbedTLS")
diff --git a/edge-client/edge-client/edge_client.h b/edge-client/edge-client/edge_client.h
index 7ad9bf4..cd5a896 100644
--- a/edge-client/edge-client/edge_client.h
+++ b/edge-client/edge-client/edge_client.h
@@ -109,6 +109,9 @@ typedef struct {
     handle_est_status_cb handle_est_status_cb;
     void *cert_renewal_ctx;
     bool reset_storage;
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    char *proxy;
+#endif
 } edgeclient_create_parameters_t;
 
 /**
diff --git a/edge-client/edge-client/edge_client_impl.h b/edge-client/edge-client/edge_client_impl.h
index 9c26ab0..57c5aff 100644
--- a/edge-client/edge-client/edge_client_impl.h
+++ b/edge-client/edge-client/edge_client_impl.h
@@ -97,6 +97,13 @@ public:
         _on_est_result_cb = est_result_cb;
     }
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    void set_proxy(const char *proxy)
+    {
+        _cloud_client.set_proxy(proxy);
+    }
+#endif
+
     void est_free_cert_chain_context(struct cert_chain_context_s *chain_ctx)
     {
         _cloud_client.est_free_cert_chain_context(chain_ctx);
diff --git a/edge-client/edge_client.cpp b/edge-client/edge_client.cpp
index 0a690b1..4bab35e 100644
--- a/edge-client/edge_client.cpp
+++ b/edge-client/edge_client.cpp
@@ -627,6 +627,9 @@ void edgeclient_create(const edgeclient_create_parameters_t *params, byoc_data_t
         client->set_on_error_callback(edgeclient_on_error_callback);
         client->set_on_certificate_renewal_callback(edgeclient_on_certificate_renewal_callback);
         client->set_on_est_result_callback(edgeclient_on_est_status_callback);
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        client->set_proxy(params->proxy);
+#endif
         tr_debug("create_client - client = %p", client);
     }
 }
diff --git a/edge-core/edge_core_clip.h b/edge-core/edge_core_clip.h
index ebde5e4..4f07f25 100644
--- a/edge-core/edge_core_clip.h
+++ b/edge-core/edge_core_clip.h
@@ -40,6 +40,9 @@ typedef struct {
     char *cbor_conf;
     char *edge_pt_domain_socket;
     char *http_port;
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    char *proxy;
+#endif
     /* special */
     const char *usage_pattern;
     const char *help_message;
@@ -67,6 +70,9 @@ const char help_message[] =
 "                                       This option cannot be used if built with DEVELOPER_MODE or FACTORY_MODE.\n"
 "                                       If this option is given second time (without --reset-storage) the current\n"
 "                                       Device Management Client configuration is used.\n"
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+"  -x --proxy                           Connect to the specified proxy and create a HTTP proxy tunnel using HTTP CONNECT\n"
+#endif
 "";
 
 const char usage_pattern[] =
@@ -309,6 +315,11 @@ int elems_to_args(Elements *elements, DocoptArgs *args, bool help,
         } else if (!strcmp(option->olong, "--http-port")) {
             if (option->argument)
                 args->http_port = option->argument;
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        } else if (!strcmp(option->olong, "--proxy")) {
+            if (option->argument)
+                args->proxy = option->argument;
+#endif
         }
     }
     /* commands */
@@ -330,6 +341,9 @@ int elems_to_args(Elements *elements, DocoptArgs *args, bool help,
 DocoptArgs docopt(int argc, char *argv[], bool help, const char *version) {
     DocoptArgs args = {
         0, 0, 0, 0, NULL, (char*) "/tmp/edge.sock", (char*) "8080",
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        NULL,
+#endif
         usage_pattern, help_message
     };
     Tokens ts;
@@ -344,9 +358,12 @@ DocoptArgs docopt(int argc, char *argv[], bool help, const char *version) {
         {"-v", "--version", 0, 0, NULL},
         {"-c", "--cbor-conf", 1, 0, NULL},
         {"-p", "--edge-pt-domain-socket", 1, 0, NULL},
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        {"-x", "--proxy", 1, 0, NULL},
+#endif
         {"-o", "--http-port", 1, 0, NULL}
     };
-    Elements elements = {0, 0, 7, commands, arguments, options};
+    Elements elements = {0, 0, sizeof(options)/sizeof(options[0]), commands, arguments, options};
 
     ts = tokens_new(argc, argv);
     if (parse_args(&ts, &elements))
diff --git a/edge-core/edge_server.c b/edge-core/edge_server.c
index 0477bb7..aac77a9 100644
--- a/edge-core/edge_server.c
+++ b/edge-core/edge_server.c
@@ -687,6 +687,9 @@ int testable_main(int argc, char **argv)
         edgeclient_create_params.handle_est_status_cb = (handle_est_status_cb)
             est_enrollment_result_notifier;
         edgeclient_create_params.cert_renewal_ctx = &g_program_context->ctx_data->registered_translators;
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        edgeclient_create_params.proxy = args.proxy;
+#endif
 
         // args.cbor_conf is in stack
         #ifdef DEVELOPER_MODE
diff --git a/lib/mbed-cloud-client/mbed-client/mbed-client-classic/mbed-client-classic/m2mconnectionhandlerpimpl.h b/lib/mbed-cloud-client/mbed-client/mbed-client-classic/mbed-client-classic/m2mconnectionhandlerpimpl.h
index 06bedf4..0047833 100644
--- a/lib/mbed-cloud-client/mbed-client/mbed-client-classic/mbed-client-classic/m2mconnectionhandlerpimpl.h
+++ b/lib/mbed-cloud-client/mbed-client/mbed-client-classic/mbed-client-classic/m2mconnectionhandlerpimpl.h
@@ -23,6 +23,7 @@
 #include "mbed-client/m2mconstants.h"
 #include "mbed-client/m2minterface.h"
 #include "mbed-client/m2mconnectionobserver.h"
+#include "mbed-client/m2mconnectionproxy.h"
 #include "mbed-client/m2mconnectionsecurity.h"
 #include "nsdl-c/sn_nsdl.h"
 #include "pal.h"
@@ -126,6 +127,12 @@ public:
      */
     void set_platform_network_handler(void *handler = NULL);
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    /**
+     */
+    void set_proxy(const char *proxy);
+#endif
+
     /**
     * \brief Claims mutex to prevent thread clashes
     * in multithreaded environment.
@@ -176,6 +183,22 @@ public:
      */
     void unregister_network_handler();
 
+
+    /**
+     * \brief Cestablishes a connection to a network proxy server specified in
+     * MBED_CLOUD_CLIENT_NETWORK_PROXY_HOST and issues a http CONNECT
+     * request to the proxy server, requesting that the proxy open a
+     * tunnel to the destination specified at _server_address:_server_port
+     * @return: palStatus_t, limited to the same return values as pal_connect()
+     *  for example:
+     * PAL_SUCCESS
+     * PAL_ERR_SOCKET_ALREADY_CONNECTED
+     * PAL_ERR_SOCKET_IN_PROGRES (sic)
+     * PAL_ERR_SOCKET_WOULD_BLOCK
+     */
+    palStatus_t proxy_connect(palSocket_t socket);
+
+    palStatus_t proxy_receive_handler();
 private:
 
     /**
@@ -189,6 +212,11 @@ private:
     */
     void socket_connect_handler();
 
+    /**
+    * @brief Callback handler for receiving response from proxy server during proxy tunnel establish request.
+    */
+    void receive_proxy_response_handler();
+
     /**
     * @brief Callback handler for receiving data for secured connection.
     */
@@ -286,7 +314,18 @@ private:
         ESocketStateUnsecureConnection,
 
         /** Secure Connection to the server has been established */
-        ESocketStateSecureConnection
+        ESocketStateSecureConnection,
+
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        /** pal_connect has been called and we are waiting for asynchronous response */
+        ESocketStateConnectingToProxy,
+
+        /** pal_connect is complete */
+        ESocketStateConnectedToProxy,
+
+        /** http CONNECT has been sent and we are waiting for asynchronous response.  on completion, transitions to ESocketStateConnected */
+        ESocketStateEstablishingProxyTunnel
+#endif
     };
 
     typedef NS_LIST_HEAD(send_data_queue_s, link) send_data_list_t;
@@ -316,6 +355,14 @@ private:
     static int8_t                               _tasklet_id;
     String                                      _server_address;
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    M2MConnectionProxy                          _proxy;
+    String                                      _proxy_address;
+    uint16_t                                    _proxy_port;
+    String                                      _proxy_auth_type;
+    String                                      _proxy_creds;
+#endif
+
     // A state variable for the socket itself, which is needed to handle the
     // asynchronous events and callbacks. Note: the state may be accessed from
     // event sender and receiver threads.
diff --git a/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandler.cpp b/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandler.cpp
index ee0506e..e449f26 100644
--- a/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandler.cpp
+++ b/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandler.cpp
@@ -74,6 +74,13 @@ void M2MConnectionHandler::set_platform_network_handler(void *handler)
     _private_impl->set_platform_network_handler(handler);
 }
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+void M2MConnectionHandler::set_proxy(const char *proxy)
+{
+    _private_impl->set_proxy(proxy);
+}
+#endif
+
 void M2MConnectionHandler::claim_mutex()
 {
     _private_impl->claim_mutex();
diff --git a/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandlerpimpl.cpp b/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandlerpimpl.cpp
index c647a37..6b8cda5 100644
--- a/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandlerpimpl.cpp
+++ b/lib/mbed-cloud-client/mbed-client/mbed-client-classic/source/m2mconnectionhandlerpimpl.cpp
@@ -83,18 +83,27 @@ void M2MConnectionHandlerPimpl::event_handler(arm_event_s *event)
         case M2MConnectionHandlerPimpl::ESocketCallback:
 
             if (_socket_state == M2MConnectionHandlerPimpl::ESocketStateHandshaking) {
+                tr_info("event_handler: ESOCKETCALLBACK: Handshaking");
                 receive_handshake_handler();
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+            } else if (_socket_state == M2MConnectionHandlerPimpl::ESocketStateEstablishingProxyTunnel) {
+                tr_info("event_handler: ESOCKETCALLBACK: EstablishingProxyTunnel");
+                receive_proxy_response_handler();
+#endif
             } else if ((_socket_state == M2MConnectionHandlerPimpl::ESocketStateUnsecureConnection) ||
                        (_socket_state == M2MConnectionHandlerPimpl::ESocketStateSecureConnection)) {
+                tr_info("event_handler: ESOCKETCALLBACK: UnsecureConnection || SecureConnection");
                 // the connection is established
                 receive_handler();
             } else {
+                tr_info("event_handler: ESOCKETCALLBACK: default");
                 socket_connect_handler();
             }
 
             // Receive processing could have changed state, so recheck
             if ((_socket_state == M2MConnectionHandlerPimpl::ESocketStateUnsecureConnection) ||
                 (_socket_state == M2MConnectionHandlerPimpl::ESocketStateSecureConnection)) {
+                tr_info("event_handler: ESOCKETCALLBACK: CHANGED TO UnsecureConnection || SecureConnection");
                 // the connection is established
                 send_socket_data();
             }
@@ -257,7 +266,15 @@ bool M2MConnectionHandlerPimpl::address_resolver(void)
 #if (PAL_DNS_API_VERSION == 2)
     tr_debug("M2MConnectionHandlerPimpl::address_resolver:asynchronous DNS");
     _handler_async_DNS = 0;
-    status = pal_getAddressInfoAsync(_server_address.c_str(), (palSocketAddress_t*)&_socket_address, &address_resolver_cb, this, &_handler_async_DNS);
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    if (_proxy_address.size() > 0) {
+        tr_debug("M2MConnectionHandlerPimpl::address_resolver:resolving proxy addr: %s", _proxy_address.c_str());
+        status = pal_getAddressInfoAsync(_proxy_address.c_str(), (palSocketAddress_t*)&_socket_address, &address_resolver_cb, this, &_handler_async_DNS);
+    } else
+#endif
+    {
+        status = pal_getAddressInfoAsync(_server_address.c_str(), (palSocketAddress_t*)&_socket_address, &address_resolver_cb, this, &_handler_async_DNS);
+    }
     if (PAL_SUCCESS != status) {
        tr_error("M2MConnectionHandlerPimpl::address_resolver, pal_getAddressInfoAsync fail. %" PRIx32, status);
        _observer.socket_error(M2MConnectionHandler::DNS_RESOLVING_ERROR);
@@ -267,7 +284,15 @@ bool M2MConnectionHandlerPimpl::address_resolver(void)
     }
 #else // #if (PAL_DNS_API_VERSION == 0)
     tr_debug("M2MConnectionHandlerPimpl::address_resolver:synchronous DNS");
-    status = pal_getAddressInfo(_server_address.c_str(), (palSocketAddress_t*)&_socket_address, &_socket_address_len);
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    if (_proxy_address.size() > 0) {
+        tr_debug("M2MConnectionHandlerPimpl::address_resolver:resolving proxy addr: %s", _proxy_address.c_str());
+        status = pal_getAddressInfo(_proxy_address.c_str(), (palSocketAddress_t*)&_socket_address, &_socket_address_len);
+    } else
+#endif
+    {
+        status = pal_getAddressInfo(_server_address.c_str(), (palSocketAddress_t*)&_socket_address, &_socket_address_len);
+    }
     if (PAL_SUCCESS != status) {
         tr_error("M2MConnectionHandlerPimpl::getAddressInfo failed with %" PRIx32, status);
         send_event(ESocketDnsError);
@@ -351,6 +376,9 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
         case ESocketStateHandshaking:
         case ESocketStateUnsecureConnection:
         case ESocketStateSecureConnection:
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        case ESocketStateEstablishingProxyTunnel:
+#endif
             // Ignore these events
             break;
 
@@ -359,7 +387,15 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
             // Initialize the socket to stable state
             close_socket();
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+            if (_proxy_port > 0) {
+                status = pal_setSockAddrPort((palSocketAddress_t*)&_socket_address, _proxy_port);
+            } else {
+                status = pal_setSockAddrPort((palSocketAddress_t*)&_socket_address, _server_port);
+            }
+#else
             status = pal_setSockAddrPort((palSocketAddress_t*)&_socket_address, _server_port);
+#endif
 
             if (PAL_SUCCESS != status) {
                 tr_error("M2MConnectionHandlerPimpl::socket_connect_handler - setSockAddrPort err: %" PRIx32, status);
@@ -380,7 +416,12 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
 
                 _address._address = (void*)_ipV4Addr;
                 _address._length = PAL_IPV4_ADDRESS_SIZE;
-                _address._port = _server_port;
+                status = pal_getSockAddrPort((palSocketAddress_t*)&_socket_address, &_address._port);
+                if (PAL_SUCCESS != status) {
+                    tr_error("M2MConnectionHandlerPimpl::socket_connect_handler - sockAddr4Port, err: %" PRIx32, status);
+                    _observer.socket_error(M2MConnectionHandler::DNS_RESOLVING_ERROR);
+                    return;
+                }
             } else if (_socket_address.addressType == PAL_AF_INET6) {
                 status = pal_getSockAddrIPV6Addr((palSocketAddress_t*)&_socket_address,_ipV6Addr);
                 if (PAL_SUCCESS != status) {
@@ -393,7 +434,12 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
 
                 _address._address = (void*)_ipV6Addr;
                 _address._length = PAL_IPV6_ADDRESS_SIZE;
-                _address._port = _server_port;
+                status = pal_getSockAddrPort((palSocketAddress_t*)&_socket_address, &_address._port);
+                if (PAL_SUCCESS != status) {
+                    tr_error("M2MConnectionHandlerPimpl::socket_connect_handler - sockAddr6Port, err: %" PRIx32, status);
+                    _observer.socket_error(M2MConnectionHandler::DNS_RESOLVING_ERROR);
+                    return;
+                }
             } else {
                 tr_error("M2MConnectionHandlerPimpl::socket_connect_handler - socket config error, stack: %d", (int)_socket_address.addressType);
                 _observer.socket_error(M2MConnectionHandler::SOCKET_ABORT);
@@ -414,10 +460,21 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
         // fall through is intentional
         case ESocketStateConnectBeingCalled:
         case ESocketStateConnecting:
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        case ESocketStateConnectingToProxy:
+#endif
             if (is_tcp_connection()) {
 #ifdef PAL_NET_TCP_AND_TLS_SUPPORT
-                tr_info("M2MConnectionHandlerPimpl::socket_connect_handler - Using TCP");
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+                if (_proxy_address.size() > 0) {
+                    tr_info("M2MConnectionHandlerPimpl::socket_connect_handler - Connecting To Proxy");
+                } else {
+                    tr_info("M2MConnectionHandlerPimpl::socket_connect_handler - Using TCP");
+                }
+#else
+                tr_info("M2MConnectionHandlerPimpl::socket_connect_handler - Using TCP");
+#endif
                 status = pal_connect(_socket, (palSocketAddress_t*)&_socket_address, sizeof(_socket_address));
 
                 if ((status == PAL_ERR_SOCKET_IN_PROGRES) || (status == PAL_ERR_SOCKET_WOULD_BLOCK)) {
@@ -425,13 +482,29 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
                     // will be used to detect the end of connect.
                     tr_debug("M2MConnectionHandlerPimpl::socket_connect_handler - pal_connect(): %" PRIx32 ", async connect started", status);
                     // we need to wait for the event
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+                    if (_proxy_address.size() > 0) {
+                        _socket_state = ESocketStateConnectingToProxy;
+                    } else {
+                        _socket_state = ESocketStateConnecting;
+                    }
+#else
                     _socket_state = ESocketStateConnecting;
+#endif
                     break;
 
                 } else if (status == PAL_SUCCESS || status == PAL_ERR_SOCKET_ALREADY_CONNECTED) {
 
                     tr_debug("M2MConnectionHandlerPimpl::socket_connect_handler - pal_connect(): success");
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+                    if (_proxy_address.size() > 0) {
+                        _socket_state = ESocketStateConnectedToProxy;
+                    } else {
+                        _socket_state = ESocketStateConnected;
+                    }
+#else
                     _socket_state = ESocketStateConnected;
+#endif
 
                 } else {
                     tr_error("M2MConnectionHandlerPimpl::socket_connect_handler - pal_connect(): failed: %" PRIx32, status);
@@ -448,6 +521,24 @@ void M2MConnectionHandlerPimpl::socket_connect_handler()
             }
 
         // fall through is a normal flow in case the UDP was used or pal_connect() happened to return immediately with PAL_SUCCESS
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        case ESocketStateConnectedToProxy:
+            if (is_tcp_connection() && _proxy_address.size() > 0) {
+                M2MConnectionProxy::ProxyError ret;
+                tr_info("M2MConnectionHandlerPimpl::establishing proxy tunnel to %s:%d", _server_address.c_str(),
+                        _server_port);
+                _socket_state = ESocketStateEstablishingProxyTunnel;
+                ret = _proxy.establish_tunnel(_socket, _server_address, _server_port, _proxy_auth_type, _proxy_creds);
+                if (M2MConnectionProxy::ERROR_NONE != ret) {
+                    tr_error("M2MConnectionHandlerPimpl::socket_connect_handler - failed to establish proxy tunnel");
+                    close_socket();
+                    _observer.socket_error(M2MConnectionHandler::ERROR_GENERIC, true);
+                    return;
+                }
+                return;
+            }
+            // fall through is a normal flow in case the UDP was used
+#endif
         case ESocketStateConnected:
             if (_security && security_instance_id >= 0) {
                 if (_secure_connection) {
@@ -669,6 +760,83 @@ void M2MConnectionHandlerPimpl::set_platform_network_handler(void *handler)
     tr_debug("M2MConnectionHandlerPimpl::set_platform_network_handler - index = %d", _net_iface);
 }
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+void M2MConnectionHandlerPimpl::set_proxy(const char *proxy)
+{
+    int c;
+
+    tr_debug("M2MConnectionHandlerPimpl::set_proxy: %s", proxy);
+    if (NULL == proxy) {
+        return;
+    }
+
+    String addr = proxy;
+    // split host:port
+    c = addr.find_last_of(':');
+    if (c > 0 && c < (int)addr.length()) {
+        int64_t value;
+        _proxy_address = addr.substr(0, c);
+        // convert port string to integer
+        String port = addr.substr(c + 1, addr.length() - c);
+        bool converted = String::convert_ascii_to_int(port.c_str(), port.length(), value);
+        if (converted == true && value > 0 && value < 65535) {
+            _proxy_port = (uint16_t)value;
+        } else {
+            // failed to convert port to integer, use default
+            _proxy_port = 1080;
+        }
+    } else {
+        // no port found, use default
+        _proxy_address = proxy;
+        _proxy_port = 1080;
+    }
+
+    // strip http://
+    String HTTP = "http://";
+    String HTTPS = "https://";
+    if (_proxy_address.compare(0, HTTP.size(), HTTP) == 0) {
+        _proxy_address = _proxy_address.substr(HTTP.size(), _proxy_address.size() - HTTP.size());
+    } else if (_proxy_address.compare(0, HTTPS.size(), HTTPS) == 0) {
+        tr_error("M2MConnectionHandlerPimpl::set_proxy: HTTPS proxy is not supported.  Use HTTP");
+        _proxy_address = "";
+        return;
+        //_proxy_address = _proxy_address.substr(HTTPS.size(), _proxy_address.size() - HTTPS.size());
+    }
+
+    // split user:pass@server
+    c = _proxy_address.find_last_of('@');
+    if (c > 0 && c < (int)_proxy_address.length()) {
+        _proxy_auth_type = "Basic";
+        _proxy_creds = _proxy_address.substr(0, c);
+        _proxy_address = _proxy_address.substr(c + 1, _proxy_address.length() - c);
+    } else {
+        _proxy_auth_type = "";
+        _proxy_creds = "";
+    }
+
+    tr_debug("M2MConnectionHandlerPimpl::set_proxy: address=%s, port=%u", _proxy_address.c_str(), _proxy_port);
+}
+
+void M2MConnectionHandlerPimpl::receive_proxy_response_handler()
+{
+    M2MConnectionProxy::ProxyError ret;
+    tr_debug("M2MConnectionHandlerPimpl::receive_proxy_response_handler()");
+
+    // assert(_socket_state == ESocketStateEstablishingProxyTunnel);
+
+    ret = _proxy.receive_handler(_socket);
+    if (ret == M2MConnectionProxy::ERROR_NONE) {
+        _socket_state = ESocketStateConnected;
+        socket_connect_handler();
+
+    } else {
+        tr_error("M2MConnectionHandlerPimpl::receive_proxy_response_handler() - failed to interpret response: %d", ret);
+        _observer.socket_error(M2MConnectionHandler::ERROR_GENERIC, true);
+        close_socket();
+    }
+}
+#endif // #if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+
 void M2MConnectionHandlerPimpl::receive_handshake_handler()
 {
     int return_value;
diff --git a/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionhandler.h b/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionhandler.h
index 16f5536..d03a46d 100644
--- a/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionhandler.h
+++ b/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionhandler.h
@@ -133,6 +133,12 @@ public:
      */
     void set_platform_network_handler(void *handler = NULL);
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    /**
+     */
+    void set_proxy(const char *proxy);
+#endif
+
     /**
     * \brief Claims mutex to prevent thread clashes
     * in multithreaded environment.
diff --git a/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionproxy.h b/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionproxy.h
new file mode 100644
index 0000000..e403419
--- /dev/null
+++ b/lib/mbed-cloud-client/mbed-client/mbed-client/m2mconnectionproxy.h
@@ -0,0 +1,90 @@
+/*
+ * Copyright (c) 2020 ARM Limited. All rights reserved.
+ * SPDX-License-Identifier: Apache-2.0
+ * Licensed under the Apache License, Version 2.0 (the License); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an AS IS BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef M2M_CONNECTION_PROXY_H
+#define M2M_CONNECTION_PROXY_H
+
+#include "mbed-client/m2mconfig.h"
+#include "pal.h"
+#include <stdlib.h>
+#include <strings.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netdb.h>
+#include <sys/uio.h>
+#include <unistd.h>
+
+/**
+ * The purpose of this class is to abstract the message protocol sent to/from
+ * a proxy server in order to request that the proxy establish a tunnel to a
+ * destination server.  The class requires an open socket already connected to
+ * the proxy server, for example after a successful pal_connect(), through which
+ * it sends command codes to the proxy server. Responses from the proxy server
+ * must be provided to this class's receive_handler.  When the receive handler
+ * returns success, the socket is considered to be connected to the destination
+ * server and this class's work is complete. The socket may then be used as
+ * normal to send and receive messages to/from the destination server.
+ */
+class  M2MConnectionProxy {
+
+public:
+    typedef enum {
+        ERROR_NONE = 0,
+        ERROR_GENERIC = -1,
+        ERROR_SOCKET_READ = -7,
+        ERROR_SOCKET_WRITE = -8,
+        ERROR_UNHANDLED_PROXY_PROTOCOL = -11, // proxy server sent a message we couldn't understand
+        ERROR_PROXY_AUTH_REQUIRED = -13, // http error code 407
+        ERROR_BAD_GATEWAY = -14 // http error code 502
+    } ProxyError;
+
+    /**
+     * @brief Constructor
+     */
+    M2MConnectionProxy();
+
+    /**
+     * @brief Destructor
+     */
+    virtual ~M2MConnectionProxy();
+
+    /**
+     * @brief calls pal_send to send the "CONNECT" command to the proxy server
+     * pre-condition: socket is already connected to the proxy server, for example after successful pal_connect()
+     * @param socket an open socket to the proxy server
+     * @param host destination hostname
+     * @param port destination port
+     * @param auth_type type of authentication required by the proxy server, if any
+     *     Empty string for no authentication
+     *     "Basic" for https://tools.ietf.org/html/rfc7617
+     *     "Bearer" for https://tools.ietf.org/html/rfc6750 section 2.1
+     * @param credentials the credentials to supply to the proxy server, formatted for auth_type
+     * @return ProxyError
+     */
+    ProxyError establish_tunnel(palSocket_t socket, String host, uint16_t port, String auth_type, String credentials);
+
+    /**
+     * @brief processes the CONNECT response received from the proxy server.
+     * calls pal_recv to read "Connection established" or "200 OK", or other error response from Proxy server
+     * @return: ProxyError::ERROR_NONE if the proxy server reported success and the proxy tunnel is established
+     */
+    ProxyError receive_handler(palSocket_t socket);
+
+    /**
+     */
+    void base64_encode(char *buffer_out, int len_out, const char *buffer_in, int len_in);
+};
+#endif // M2M_CONNECTION_PROXY_H
diff --git a/lib/mbed-cloud-client/mbed-client/mbed-client/m2minterface.h b/lib/mbed-cloud-client/mbed-client/mbed-client/m2minterface.h
index d5bef2a..fcbac68 100644
--- a/lib/mbed-cloud-client/mbed-client/mbed-client/m2minterface.h
+++ b/lib/mbed-cloud-client/mbed-client/mbed-client/m2minterface.h
@@ -371,6 +371,12 @@ public:
      *  register to the LWM2M server.
      */
     virtual void resume(void *iface, const M2MBaseList &object_list) = 0;
+
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    /**
+     */
+    virtual void set_proxy(const char *proxy) = 0;
+#endif
 };
 
 #endif // M2M_INTERFACE_H
diff --git a/lib/mbed-cloud-client/mbed-client/source/include/m2minterfaceimpl.h b/lib/mbed-cloud-client/mbed-client/source/include/m2minterfaceimpl.h
index 8dc2b71..f3cf088 100644
--- a/lib/mbed-cloud-client/mbed-client/source/include/m2minterfaceimpl.h
+++ b/lib/mbed-cloud-client/mbed-client/source/include/m2minterfaceimpl.h
@@ -308,6 +308,12 @@ public:
      */
     virtual void resume(void *iface, const M2MBaseList &list);
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    /**
+     */
+    virtual void set_proxy(const char *proxy);
+#endif
+
 protected: // From M2MNsdlObserver
 
     virtual void coap_message_ready(uint8_t *data_ptr,
diff --git a/lib/mbed-cloud-client/mbed-client/source/m2mconnectionproxy.cpp b/lib/mbed-cloud-client/mbed-client/source/m2mconnectionproxy.cpp
new file mode 100644
index 0000000..8af99e7
--- /dev/null
+++ b/lib/mbed-cloud-client/mbed-client/source/m2mconnectionproxy.cpp
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) 2020 ARM Limited. All rights reserved.
+ * SPDX-License-Identifier: Apache-2.0
+ * Licensed under the Apache License, Version 2.0 (the License); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an AS IS BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "mbed-client/m2mconnectionproxy.h"
+#include "mbed-trace/mbed_trace.h"
+
+#include <cstdio>
+#include <stdlib.h>
+
+#define TRACE_GROUP "mClt"
+
+M2MConnectionProxy::M2MConnectionProxy()
+{
+}
+
+M2MConnectionProxy::~M2MConnectionProxy()
+{
+}
+
+M2MConnectionProxy::ProxyError
+M2MConnectionProxy::establish_tunnel(palSocket_t socket, String host, uint16_t port, String auth_type, String credentials)
+{
+    int n;
+    char buffer[256];
+
+    if (host.length() == 0) {
+        return ERROR_GENERIC;
+    }
+
+    tr_debug("Sending proxy CONNECT directive...\n");
+
+    snprintf(buffer, sizeof(buffer), "CONNECT %s:%d HTTP/1.0\r\n", host.c_str(), port);
+    if (credentials.length() > 0) {
+        // only Basic auth is supported
+        char tmp[256], proxy_auth[256];
+        snprintf(tmp, sizeof(tmp), "%s", credentials.c_str());
+        base64_encode(proxy_auth, sizeof(proxy_auth), tmp, strlen(tmp));
+        snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer), "Proxy-Authorization: Basic %s\r\n", proxy_auth);
+    }
+    strcat(buffer, "\r\n");
+
+    size_t sentDataSize;
+    n = pal_send(socket, buffer, strlen(buffer), &sentDataSize);
+    if (n != PAL_SUCCESS) {
+        tr_error("ERROR writing to socket: %d", n);
+        return ERROR_SOCKET_WRITE;
+    }
+
+    return ERROR_NONE;
+}
+
+M2MConnectionProxy::ProxyError M2MConnectionProxy::receive_handler(palSocket_t socket)
+{
+    size_t n;
+    char buffer[256];
+    palStatus_t rt;
+
+    memset(buffer, 0, sizeof(buffer));
+
+    // receive answer from proxy
+    rt = pal_recv(socket, buffer, sizeof(buffer) - 1, &n);
+    if (rt != PAL_SUCCESS) {
+        tr_error("ERROR reading from socket: %d", rt - PAL_ERR_SOCKET_ERROR_BASE);
+        return ERROR_SOCKET_READ;
+    }
+
+    int http_ver, http_code;
+    sscanf(buffer, "HTTP/1.%d %d", &http_ver, &http_code);
+// possible proxy answers:
+//  HTTP/1.0 500 Unable to connect
+//  HTTP/1.0 407 Proxy Authentication Required
+//  HTTP/1.0 401 Unauthorized
+//  HTTP/1.0 200 Connection established
+    if (http_code != 200) {
+        tr_error("Failed to connect to proxy: HTTP %d", http_code);
+        return ERROR_GENERIC;
+    }
+
+    tr_info("Proxy response: HTTP/1.%d %d", http_ver, http_code);
+
+// TODO: read until \n\n
+// tr_debug("%s\n",buffer);
+
+    return ERROR_NONE;
+}
+
+// buffer_out length needs to be at least 4/3*len(buffer_in)
+void M2MConnectionProxy::base64_encode(char *buffer_out, int len_out, const char *buffer_in, int len_in)
+{
+    unsigned int val = 0;
+    int i_in, i_out = 0, bits = -6;
+    const char *charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+    memset(buffer_out, 0, len_out);
+    for (i_in = 0; i_in < len_in; i_in++) {
+        val = (val << 8) + buffer_in[i_in];
+        bits += 8;
+        while (bits >= 0) {
+            buffer_out[i_out++] = charset[(val >> bits) & 0x3F];
+            bits -= 6;
+        }
+    }
+    if (bits > -6)
+        buffer_out[i_out++] = charset[((val << 8) >> (bits + 8)) & 0x3F];
+    while (i_out % 4) buffer_out[i_out++] = '=';
+}
diff --git a/lib/mbed-cloud-client/mbed-client/source/m2minterfaceimpl.cpp b/lib/mbed-cloud-client/mbed-client/source/m2minterfaceimpl.cpp
index 6a35231..12572bd 100644
--- a/lib/mbed-cloud-client/mbed-client/source/m2minterfaceimpl.cpp
+++ b/lib/mbed-cloud-client/mbed-client/source/m2minterfaceimpl.cpp
@@ -1523,3 +1523,10 @@ void M2MInterfaceImpl::create_random_initial_reconnection_time()
 
     }
 }
+
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+void M2MInterfaceImpl::set_proxy(const char *proxy)
+{
+    _connection_handler.set_proxy(proxy);
+}
+#endif
diff --git a/lib/mbed-cloud-client/mbed-cloud-client/MbedCloudClient.h b/lib/mbed-cloud-client/mbed-cloud-client/MbedCloudClient.h
index f1b463b..6224cd1 100644
--- a/lib/mbed-cloud-client/mbed-cloud-client/MbedCloudClient.h
+++ b/lib/mbed-cloud-client/mbed-cloud-client/MbedCloudClient.h
@@ -555,6 +555,12 @@ public:
     void est_free_cert_chain_context(cert_chain_context_s *context) const;
 #endif // !MBED_CLIENT_DISABLE_EST_FEATURE
 
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    /**
+     */
+    void set_proxy(const char *proxy);
+#endif
+
 protected: // from ServiceClientCallback
 
     /**
@@ -602,6 +608,9 @@ private:
     FP1<void,int>                                   _on_error;
     const char                                      *_error_description;
     bool                                            _init_done;
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+    const char                                      *_proxy;
+#endif
 
 #if MBED_CLOUD_CLIENT_STL_API
     // This API and functionality is being phased out, as it is wasting resources by
diff --git a/lib/mbed-cloud-client/source/MbedCloudClient.cpp b/lib/mbed-cloud-client/source/MbedCloudClient.cpp
index a080f96..cd7f8c7 100755
--- a/lib/mbed-cloud-client/source/MbedCloudClient.cpp
+++ b/lib/mbed-cloud-client/source/MbedCloudClient.cpp
@@ -152,6 +152,9 @@ bool MbedCloudClient::setup(void* iface)
     if (success) {
         // set the network interface to M2MInterface
         _client.connector_client().m2m_interface()->set_platform_network_handler(iface);
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+        _client.connector_client().m2m_interface()->set_proxy(_proxy);
+#endif
         _client.initialize_and_register(_object_list);
     }
 
@@ -405,3 +408,10 @@ void MbedCloudClient::est_free_cert_chain_context(cert_chain_context_s *context)
     _client.connector_client().est_client().free_cert_chain_context(context);
 }
 #endif // !MBED_CLIENT_DISABLE_EST_FEATURE
+
+#if MBED_CLOUD_CLIENT_NETWORK_PROXY == 1
+void MbedCloudClient::set_proxy(const char *proxy)
+{
+    _proxy = proxy;
+}
+#endif
-- 
2.21.0 (Apple Git-122)

